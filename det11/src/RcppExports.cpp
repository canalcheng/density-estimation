// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppMLPACK.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ml_det
Rcpp::List ml_det(arma::mat& dataset, const size_t folds, const bool volreg, const size_t maxsize, const size_t minsize);
RcppExport SEXP _det11_ml_det(SEXP datasetSEXP, SEXP foldsSEXP, SEXP volregSEXP, SEXP maxsizeSEXP, SEXP minsizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const size_t >::type folds(foldsSEXP);
    Rcpp::traits::input_parameter< const bool >::type volreg(volregSEXP);
    Rcpp::traits::input_parameter< const size_t >::type maxsize(maxsizeSEXP);
    Rcpp::traits::input_parameter< const size_t >::type minsize(minsizeSEXP);
    rcpp_result_gen = Rcpp::wrap(ml_det(dataset, folds, volreg, maxsize, minsize));
    return rcpp_result_gen;
END_RCPP
}
// mlkmeans
List mlkmeans(const arma::mat& data, const int& clusters);
RcppExport SEXP _det11_mlkmeans(SEXP dataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const int& >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(mlkmeans(data, clusters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_det11_ml_det", (DL_FUNC) &_det11_ml_det, 5},
    {"_det11_mlkmeans", (DL_FUNC) &_det11_mlkmeans, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_det11(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
